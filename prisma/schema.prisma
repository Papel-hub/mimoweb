// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============ MODELS ============

model User {
  id            String      @id @default(uuid())
  name          String
  email         String      @unique
  password      String
  role          Role        @default(USER)
  phone         String?
  address       String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relacionamentos
  orders        Order[]
  cartItems     CartItem[]
  giftCards     GiftCard[]  @relation("GiftCardAssignedTo")
  createdGifts  GiftCard[]  @relation("GiftCardCreatedBy")
}

model Product {
  id            String       @id @default(uuid())
  title         String
  description   String?
  price         Float
  imageUrl      String?
  stock         Int           @default(0)
  rating        Float?        @default(0)
  category      Category?     @relation(fields: [categoryId], references: [id])
  categoryId    String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  orderItems    OrderItem[]
  cartItems     CartItem[]
}

model Category {
  id          String      @id @default(uuid())
  name        String      @unique
  description String?
  products    Product[]
}

model Order {
  id            String       @id @default(uuid())
  user          User         @relation(fields: [userId], references: [id])
  userId        String
  totalAmount   Float
  status        OrderStatus  @default(PENDING)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  items         OrderItem[]
  giftCardUsed  GiftCard?    @relation(fields: [giftCardId], references: [id])
  giftCardId    String?
}

model OrderItem {
  id         String    @id @default(uuid())
  order      Order     @relation(fields: [orderId], references: [id])
  orderId    String
  product    Product   @relation(fields: [productId], references: [id])
  productId  String
  quantity   Int
  price      Float
}

model CartItem {
  id          String     @id @default(uuid())
  user        User       @relation(fields: [userId], references: [id])
  userId      String
  product     Product    @relation(fields: [productId], references: [id])
  productId   String
  quantity    Int        @default(1)
  addedAt     DateTime   @default(now())
}

model GiftCard {
  id            String     @id @default(uuid())
  code          String     @unique
  value         Float
  balance       Float
  isActive      Boolean    @default(true)
  createdBy     User?      @relation("GiftCardCreatedBy", fields: [createdById], references: [id])
  createdById   String?
  assignedTo    User?      @relation("GiftCardAssignedTo", fields: [assignedToId], references: [id])
  assignedToId  String?
  createdAt     DateTime   @default(now())
  expiresAt     DateTime?
  usedOrders    Order[]
}

// ============ ENUMS ============

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}
